import { GraphQLInt, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLString } from 'graphql'
import { DateScalar } from '../scalars';
import { terminalType } from '../terminales/schema';
import { getTerminalesByUser } from '../terminales/service';
import { addUser, getUser, getUsers, updateUser } from './service';

export const userType = new GraphQLObjectType({
    name: 'User',
    description: 'Represents a User',
    fields: {
        id: { type: new GraphQLNonNull(GraphQLString) },
        username: { type: new GraphQLNonNull(GraphQLString) },
        createAt: { type: new GraphQLNonNull(DateScalar) } ,
        terminales: { 
            type: new GraphQLList(terminalType),
            resolve: (_) => getTerminalesByUser(_.id)
        }
    } 
});

export const userQuery : GraphQLObjectType = new GraphQLObjectType({
    name: 'Query',
    fields: {
        users: {
            type: new GraphQLList(userType),
            resolve: () => getUsers()            
        },
        user: {
            type: userType,
            args: {
                id: { type: new GraphQLNonNull(GraphQLString), }                
            },
            resolve: (_, {id}) => getUser(id)
        },
        userCount:{
            type: GraphQLInt,
            resolve: () => getUsers().then((users) => users.length) 
        } 
    }    
});

export const userMutation : GraphQLObjectType = new GraphQLObjectType({
    name: 'Mutation',
    fields: {        
        addUser: {
            type: userType,
            args: {
                id: { type: new GraphQLNonNull(GraphQLString), },
                username: { type: new GraphQLNonNull(GraphQLString) }                        
            },
            resolve: (_, params) => addUser(params)
        },
        updateUser: {
            type: userType,
            args: {
                id: { type: new GraphQLNonNull(GraphQLString), },
                username: { type: new GraphQLNonNull(GraphQLString) }                        
            },
            resolve: (_, params) => updateUser(params)
        }
    }    
});