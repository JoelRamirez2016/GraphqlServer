import { GraphQLInt, GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLString } from 'graphql'
import { DateScalar } from '../scalars';
import { userType } from '../user/schema';
import { getUser } from '../user/service';
import { addTerminal, getTerminal, getTerminales } from './service';

export const terminalType = new GraphQLObjectType({
    name: 'Terminal',
    description: 'Represents a Terminal',
    fields: {
        id: { type: new GraphQLNonNull(GraphQLString) },
        name: { type: new GraphQLNonNull(GraphQLString) },       
        createAt: { type: new GraphQLNonNull(DateScalar) },
        user: { 
            type: new GraphQLNonNull(userType),
            resolve: (_) => getUser(_.id)
        }
    }
});

export const terminalQuery = new GraphQLObjectType({
    name: 'Query',
    fields: {
        terminales: {
            type: new GraphQLList(terminalType),
            resolve: (_, ) => getTerminales()            
        },
        terminal: {
            type: terminalType,
            args: {
                id: { type: new GraphQLNonNull(GraphQLString), }
                
            },
            resolve: (_, {id}) => getTerminal(id)
        },
        terminalCount:{
            type: GraphQLInt,
            resolve: () => getTerminales().then((terminales) => terminales.length) 
        } 
    }    
});

export const terminalMutation = new GraphQLObjectType({
    name: 'Mutation',
    fields: {        
        addTerminal: {
            type: terminalType,
            args: {
                id: { type: new GraphQLNonNull(GraphQLString), },
                name: { type: new GraphQLNonNull(GraphQLString) },
                userId: { type: new GraphQLNonNull(GraphQLString) }
            },
            resolve: (_, params) => addTerminal(params)
        }
    }    
});